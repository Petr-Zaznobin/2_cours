#include <iostream>
#include<vector>
#include <string>
#include <algorithm>

using namespace std;


template<typename T>
class List {
private:
    class Node {
    public:
        T data = { 0 };
        Node* next;

        Node() {
            next = nullptr;
        }

        Node(T data_) {
            data = data_;
            next = nullptr;
        }

        ~Node() {
            data = 0;
        }

        void change_data(T data_) {
            data = data_;
        }
    };

    Node* head;
    Node* tail;
    size_t size;


public:
    List() {
        head = new Node;
        size = 0;
        head->next = new Node;
    }

    ~List() {
        Node* circle = Circle_elem();
        if (circle == nullptr) {
            Node* tmp = head;
            while (head != nullptr) {
                head = head->next;
                delete(tmp);
                tmp = head;
            }
        }
        else {
            int f = 0;
            Node* tmp = head;
            if (head == circle) f++;
            while (f!=2) {
                head = head->next;
                delete(tmp);
                tmp = head;
                if (tmp == circle) f++;
            }
        }
    }

    Node* Circle_elem() {
        
        Node* tmp_s = new Node;
        Node* tmp_f = new Node;
        tmp_s = head;
        tmp_f = head;
        while (tmp_f || (tmp_s == tmp_f)) {
            for (int i = 0; i < 2; i++) {
                if (tmp_f->next != nullptr) {
                    tmp_f = tmp_f->next;
                }
            }
            tmp_s = tmp_s->next;
        }
        if (tmp_s == tmp_f) {
            tmp_s = head;
            while (tmp_s != tmp_f) {
                tmp_s = tmp_s->next;
                tmp_f = tmp_f->next;
            }
            retutn tmp_s;
        }
        return nullptr;
    }

    Node* get_head() {
        return head;
    }

    void push(T data) {
        Node* p = new Node;
        p->next = head;
        p->data = data;
        head = p;
        size++;
    }

    Node pop() {
        Node* p = new Node;
        p = head;
        head = head->next;
        size--;
        return p->data;
    }

    bool isEmpty() {
        return size == 0;
    }

    List cpy() {
        Node* cur = new Node;
        Node* Old_Next = new Node;
        cur = head; //нет проверки на присваивание null в последний элемент
        while (tmp) {
            Node* New_Node = new Node;
            Old_Next = tmp->next;
            cur->next = *New_Node;
            New_Node->next = Old_next;
            //tmp = New_Node->next; Надо двигать tmp
        }

        // вряд-ли верно:
        Node* tmp_U = new Node;
        Node* tmp_D = new Node;
        tmp_U = head;
        tmp_D = head->next;
        while (tmp_D) {
            if (tmp_U->data != null) {
                tmp_D->data = &((tmp_U->data)->next);
            }
            tmp_U = tmp_U->next;
            tmp_U = tmp_U->next;
            tmp_D = tmp_D->next;
            tmp_D = tmp_D->next;
        }

        //осталось грамотно избавится от верхнего списка
    }
};



int main() {

}
